apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: connection-manager
  labels:
    app: connection-manager
spec:
  serviceName: connection-manager
  selector:
    matchLabels:
      app: connection-manager
  replicas: 1
  template:
    metadata:
      labels:
        app: connection-manager
    spec:
      containers:
        - name: connection-manager
          image: "image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/zapm-transaction-processor:6.1.0-17" #input01
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5455
          # volumeMounts:
          #   - mountPath: "/var/certs"
          #     name: input15
          #     readOnly: true
          env:
            - name: ZAPM_REDIS_HOSTNAME
              value: "redis-svc"
            - name: ZAPM_KAFKA_SERVER
              value: "kafka-internal-svc:9092"
            - name: ZAPM_CONNECTION_MANAGER
              value: "true"
            - name: ZAPM_LOG_LEVEL
              value: debug
      #       - name: CONN_SSL_CLIENT_AUTH
      #         value: "required"
      #       - name: CONN_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
      #         value: "https"
      #       - name: CONN_SSL_TRUSTSTORE_LOCATION
      #         value: "/var/certs/truststore.jks"
      #       - name: CONN_SSL_KEYSTORE_LOCATION
      #         value: "/var/certs/keystore.jks"
      #       - name: CONN_SSL_TRUSTSTORE_PASSWORD
      #         valueFrom:
      #           secretKeyRef:
      #             name: input15
      #             key: truststore-pass
      #       - name: CONN_SSL_KEYSTORE_PASSWORD
      #         valueFrom:
      #           secretKeyRef:
      #             name: input15
      #             key: keystore-pass
      #       - name: CONN_SSL_KEY_PASSWORD
      #         valueFrom:
      #           secretKeyRef:
      #             name: input15
      #             key: key-pass
      # volumes:
      #   - name: input15
      #     secret:
      #       secretName: input15
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: event-partitioner
  labels:
    app: event-partitioner
spec:
  serviceName: event-partitioner
  selector:
    matchLabels:
      app: event-partitioner
  replicas: 1
  template:
    metadata:
      labels:
        app: event-partitioner
    spec:
      containers:
        - name: event-partitioner
          image: "image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/zapm-transaction-processor:6.1.0-17" #input01
          imagePullPolicy: IfNotPresent
          env:
            - name: ZAPM_KAFKA_SERVER
              value: "kafka-internal-svc:9092"
            - name: ZAPM_EVENT_PARTITIONER
              value: "true"
            - name: ZAPM_LOG_LEVEL
              value: info
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: span-collector
  labels:
    app: span-collector
spec:
  serviceName: span-collector
  selector:
    matchLabels:
      app: span-collector
  replicas: 1
  template:
    metadata:
      labels:
        app: span-collector
    spec:
      containers:
        - name: span-collector
          image: "image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/zapm-transaction-processor:6.1.0-17" #input01
          imagePullPolicy: IfNotPresent
          env:
            - name: ZAPM_REDIS_HOSTNAME
              value: "redis-svc"
            - name: ZAPM_KAFKA_SERVER
              value: "kafka-internal-svc:9092"
            - name: ZAPM_SPAN_COLLECTOR
              value: "true"
            - name: ZAPM_LOG_LEVEL
              value: info
            # If using Instana as the vendor, uncomment below name/value if MQ->CICS and MQ->IMS support is desired,
            # setting value to "1000" 
            - name: ZAPM_COLLECTION_DELAY
              value: "1000"
---
# Source: zapm-connect/templates/transaction-processor.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: span-factory
  labels:
    app: span-factory
spec:
  serviceName: span-factory
  selector:
    matchLabels:
      app: span-factory
  replicas: 1
  template:
    metadata:
      labels:
        app: span-factory
    spec:
      containers:
        - name: span-factory
          image: "image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/zapm-transaction-processor:6.1.0-17" #input01
          imagePullPolicy: IfNotPresent
          env:
            - name: ZAPM_REDIS_HOSTNAME
              value: "redis-svc"
            - name: ZAPM_KAFKA_SERVER
              value: "kafka-internal-svc:9092"
            - name: ZAPM_SPAN_FACTORY
              value: "true"
            - name: ZAPM_LOG_LEVEL
              value: info
            - name: ZAPM_KAFKA_CLIENT_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: transaction-factory
  labels:
    app: span-factory
spec:
  serviceName: transaction-factory
  selector:
    matchLabels:
      app: transaction-factory
  replicas: 1
  template:
    metadata:
      labels:
        app: transaction-factory
    spec:
      containers:
        - name: transaction-factory
          image: "image-registry.openshift-image-registry.svc.cluster.local:5000/openshift/zapm-transaction-processor:6.1.0-17" #input01
          imagePullPolicy: IfNotPresent
          env:
            - name: ZAPM_REDIS_HOSTNAME
              value: "redis-svc"
            - name: ZAPM_KAFKA_SERVER
              value: "kafka-internal-svc:9092"
            - name: ZAPM_TRANSACTION_FACTORY
              value: "true"
            - name: ZAPM_LOG_LEVEL
              value: INFO
            - name: ZAPM_KAFKA_CLIENT_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
---
apiVersion: v1
kind: Service
metadata:
  name: connection-manager-svc
  labels:
    app: connection-manager
spec:
  selector:
    app: connection-manager
  ports:
    - name: connection-manager-svc
      port: 5455
      nodePort: 30455
  type: NodePort
